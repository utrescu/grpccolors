syntax = "proto3";

package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

message Color {
    int64 id = 1;
    string nom = 2;
    string rgb = 3;
    google.protobuf.Timestamp creacio = 4;
}

// Al crear un color s'han de passar les dades
message CreateRequest {
    string api = 1;
    Color color = 2;
}

// Quan es crea un color retornem el seu nou id
message CreateResponse {
    string api = 1;
    int64 id = 2;
}

message ReadRequest {
    string api = 1;
    int64 id = 2;
}

message ReadResponse {
    string api = 1;
    Color color = 2;
}

message UpdateRequest {
    string api = 1;
    Color color = 2;
}

message UpdateResponse {
    string api = 1;
    int64 updated = 2;
}

message DeleteRequest{
    string api = 1;
    int64 id = 2;
}

message DeleteResponse{
    string api = 1;
    int64 deleted = 2;
}

message ReadAllRequest{
    string api = 1;
}

// Contains list of all todo tasks
message ReadAllResponse{
    string api = 1;
    repeated Color colors = 2;
}

service ColorService {
    // Create new task
    rpc Create(CreateRequest) returns (CreateResponse){
        option (google.api.http) = {
            post: "/v1/colors"
            body: "*"
        };
    }

    // Read  task
    rpc Read(ReadRequest) returns (ReadResponse){
        option (google.api.http) = {
            get: "/v1/colors/{id}"
        };
    }

    // Update  task
    rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            put: "/v1/colors/{color.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/colors/{color.id}"
                body: "*"
            }
        };
    }

    // Delete  task
    rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete: "/v1/colors/{id}"
        };
    }

    // Read all  tasks
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
        option (google.api.http) = {
            get: "/v1/colors"
        };
    }
}
